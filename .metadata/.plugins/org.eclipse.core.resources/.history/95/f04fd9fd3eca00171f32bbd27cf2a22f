package bg.uni.sofia.fmi.mjt.cinema.reservation.system;

import java.time.LocalDateTime;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import bg.uni.sofia.fmi.mjt.cinema.reservation.system.core.Movie;
import bg.uni.sofia.fmi.mjt.cinema.reservation.system.core.Projection;
import bg.uni.sofia.fmi.mjt.cinema.reservation.system.core.Ticket;
import bg.uni.sofia.fmi.mjt.cinema.reservation.system.exceptions.AlreadyReservedException;
import bg.uni.sofia.fmi.mjt.cinema.reservation.system.exceptions.ExpiredProjectionException;
import bg.uni.sofia.fmi.mjt.cinema.reservation.system.exceptions.InvalidSeatException;
import bg.uni.sofia.fmi.mjt.cinema.reservation.system.exceptions.ProjectionNotFoundException;
import bg.uni.sofia.fmi.mjt.cinema.reservation.system.exceptions.ReservationNotFoundException;

public class CinemaCity implements CinemaReservationSystem{

	Map<Movie, List<Projection>> cinemaProgram;
	HashSet<Ticket> reservedTickets;
	
	public CinemaCity(Map<Movie, List<Projection>> cinemaProgram) {
		this.cinemaProgram = cinemaProgram;
	}

	@Override
	public void bookTicket(Ticket ticket) throws AlreadyReservedException, ProjectionNotFoundException,
			InvalidSeatException, ExpiredProjectionException {
		if (reservedTickets.contains(ticket))
		{
			throw new AlreadyReservedException("This ticket is already reserved!");
		}
		Projection ticketProjection = ticket.getProjection();
		Movie ticketMovie = ticketProjection.getMovie();
		if (!cinemaProgram.containsKey(ticketMovie))
		{
			throw new ProjectionNotFoundException("Movie doesnt exist!");
		}
		List<Projection> projections = cinemaProgram.get(ticketMovie);
		if(!projections.contains(ticketProjection))
		{
			throw new ProjectionNotFoundException("Projection doesnt exist!");
		}
		if (ticketProjection.getDate().isBefore(LocalDateTime.now()))
		{
			throw new ExpiredProjectionException("The projection is expired!");
		}
		
		
	}

	@Override
	public void cancelTicket(Ticket ticket) throws ReservationNotFoundException, ProjectionNotFoundException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public int getFreeSeats(Projection projection) throws ProjectionNotFoundException {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public Collection<Movie> getSortedMoviesByGenre() {
		// TODO Auto-generated method stub
		return null;
	}
}
