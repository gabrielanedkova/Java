package bg.uni.sofia.fmi.mjt.cache;

import static org.junit.Assert.*;

import java.time.LocalDateTime;
import java.util.function.LongToDoubleFunction;

import org.junit.Test;

public class MemCacheTest {

    @Test
    public void addElementWhenCacheIsFull() {
        MemCache<Integer, String> test = new MemCache<Integer, String>(0);
        try {
            test.set(1, "test", null);
            fail();
        } catch (CapacityExceededException e) {
            assertEquals(e.getMessage(), "The cache is full!!!");
        }
    }

  

    @Test
    public void addsAndRemovesCache() throws CapacityExceededException {
        MemCache<Integer, String> test = new MemCache<Integer, String>();
        final int key = 12;
        test.set(key, "test", null);
        test.remove(key);
        assertNull(test.get(key));

    }

    @Test
    public void updatesExistingCahce() throws CapacityExceededException {
        MemCache<Integer, String> test = new MemCache<Integer, String>();
        final int key = 12;
        test.set(key, "test", null);
        String expectedOUtput = "updatedTest";
        test.set(key, expectedOUtput, null);
        assertEquals(test.get(key), expectedOUtput);

    }

    @Test
    public void getShouldReturnNullWhenCalledWithExpiredElement()
        throws CapacityExceededException {
        MemCache<Integer, String> test = new MemCache<Integer, String>();
        test.set(1, "test", LocalDateTime.now().minusNanos(1));
        assertNull(test.get(1));

    }

    @Test
    public void hitRatioWithNoHits() {
        MemCache<Integer, String> test = new MemCache<Integer, String>();
        double zeroHitRate = 0.0;
        assertEquals(test.getHitRate(), zeroHitRate, 0);
    }
    
    @Test
    public void sizeAndHitRatioShouldBeZeroAfterClear() throws CapacityExceededException {
        MemCache<Integer, String> test = new MemCache<Integer, String>();
        test.set(1, "test1", LocalDateTime.now());
        test.set(2, "test1", LocalDateTime.now());
        test.set(3, "test1", LocalDateTime.now());
        test.clear();
        final long actualOutput = test.size();
        final long expectedOutput = 0;
        assertEquals(actualOutput, expectedOutput);
    }
}

